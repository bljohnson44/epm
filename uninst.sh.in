#!/bin/sh

if test "`dirname "$0"`" != "."; then
	cd "`dirname "$0"`"
fi
if [ -d `pwd`/locale ] ; then
	TEXTDOMAINDIR=`pwd`/locale
else
	TEXTDOMAINDIR="@datarootdir@/locale"
fi

TEXTDOMAIN=epm

export TEXTDOMAINDIR
export TEXTDOMAIN

eval_gettext() {
if [ -x "`which gettext 2>/dev/null`" ] ; then
    if [ -x "`which envsubst 2>/dev/null`" ] ; then
	gettext "$1" | (`envsubst --variables "$1"`; envsubst "$1")
    else
	gettext "$1" | echo "$1"
    fi
else
    echo "$1"
fi
}

WelcomePane() {
clear
echo ""
echo "`eval_gettext \"This script will help you remove Dr.Web packages\"`"
echo ""
while true ; do
    printf "`eval_gettext \"Do you wish to continue? (YES/no) \"`"
    showyesno
done
}

checkNum() {
[ 1 -eq "$1" ] 2>/dev/null
return $?
}

checkRoot() {
if [ `id -u` != 0 ]; then
  echo
  echo "`eval_gettext \"Sorry, you must be root to remove Dr.Web software.\"`"
  echo
  exit 1
fi
}

envInit(){
if [ -f /usr/xpg4/bin/awk ]; then
    AWK=/usr/xpg4/bin/awk
else
    AWK=awk
fi

if [ -f /usr/xpg4/bin/sed ]; then
    SED=/usr/xpg4/bin/sed
else
    SED=sed
fi

if [ -f /usr/xpg4/bin/grep ]; then
    GREP=/usr/xpg4/bin/grep
else
    GREP=grep
fi

if [ -f /usr/xpg4/bin/egrep ]; then
    EGREP=/usr/xpg4/bin/egrep
else
    EGREP=egrep
fi
}

showyesno() {
    read yesno
    case "$yesno" in
        y | yes | Y | Yes | YES | "")
	    echo "yes"
            break
        ;;
        n | no | N | No | NO)
	    echo "no"
            exit 1
        ;;
        *)
            echo "`eval_gettext \"Please enter yes or no.\"`"
        ;;
    esac
}

initCustom(){
list=`ls *.remove 2>/dev/null | sort 2>/dev/null`
selectedCustom=""
packageListLoop=true
}

isselectedCustom(){
item="$1"
retval=1
for m in $selectedCustom ; do
    if [ "$m" = "$item" ] ; then
	retval=0
	break
    fi
done
return $retval
}

numToNameCustom() {
num=$1
i=0
retval=""
for k in $list ; do
    i=`expr $i + 1`
    if [ $num -eq $i ] ; then
	retval=$k
	break
    fi
done
echo "$retval"
}

doselectCustom() {
#check if not number
checkNum "$1"
if [ $? -eq 2 ] ; then
    name=$1
else
    name=`numToNameCustom $1`
fi

if ( isselectedCustom "$name" ) ; then
    #remove
    selectedCustom=`echo "$selectedCustom" | tr "[:space:]" "\n" | $GREP -v "$name"`
else
    #add
    if [ -z "$selectedCustom" ] ; then
	selectedCustom="$name"
    else
	selectedCustom="$name $selectedCustom"
    fi
fi
    REQ_CHECK_LOOP=true
    while $REQ_CHECK_LOOP ; do
	REQ_CHECK_LOOP=false
	for f in $list ; do
	  if [ `isselectedCustom "$f"; echo $?` -ne 0 ] ; then
	    crequires=`cat "./$f" | grep '#%requires' | $AWK '{print $2".remove"}' | sort | uniq`
	    if [ -n "$crequires" ] ; then
		for l in $crequires ; do
		  if ( isselectedCustom "$name" ) ; then
		    if ( isselectedCustom "$l" ) ; then
			selectedCustom="$selectedCustom $f"
			REQ_CHECK_LOOP=true
		    fi
		  else
		    if ( isselectedCustom "$l" ) ; then
			selectedCustom=`echo "$selectedCustom" | tr "[:space:]" "\n" | $GREP -v "$l"`
			REQ_CHECK_LOOP=true
		    fi
		  fi
		done
	    fi
	  fi
	done
    done
    selectedCustom=`echo "$selectedCustom" | tr "[:space:]" "\n" | sort | uniq`
}

showListCustom() {
clear
k=0
echo "`eval_gettext \"Select the software you want to remove:\"`"
for p in $list ; do
    k=`expr $k + 1`
    flag=" "
    isselectedCustom "$p" && flag="X"
    product="`head "$p" | $GREP %product | $SED 's|^#%product ||'`"
    ver="`head "$p" | $GREP %version | cut -d" " -f2`"
    printf "\t[%s] %d %s (%s)\n" "$flag" $k "$product" "$ver"
done
}

runCustomRemove() {
packageListLoop=false
retval=0
if [ -n "$selectedCustom" ] ; then
    clear
    echo "`eval_gettext \"A list of packages marked for removal:\"`"
    for f in $selectedCustom ; do
	printf "\t%s\n" "`basename "$f" .remove`"
    done
    while true ; do
	printf "`eval_gettext \"Are you sure you want to remove the selected packages? (YES/no) \"`"
	showyesno
    done
    for comp in $selectedCustom ; do
	./"$comp" now
    done
else
    echo "`eval_gettext \"Nothing to remove. Exiting...\"`"
    retval=1
fi
return $retval
}

mainCustom() {
if [ -z "$list" ] ; then
    echo "`eval_gettext \"Nothing to remove. Exiting...\"`"
    return 1
fi
while $packageListLoop ; do
    showListCustom
    echo
printf "`eval_gettext \"To select a package you want to remove or deselect some previously
selected package - enter the corresponding package number and press Enter.

You may enter A or All to select all the packages, and N or None to deselect all of them.
Enter R or Remove to remove selected packages.\nEnter 0, Q or Quit to quit the dialog.
All values are case insensitive.\"`\n"
    usersel=0
    printf "`eval_gettext \"Select: \"`"
    read usersel
    case "$usersel" in
	0 | [qQ] | [qQ][uU][iI][tT])
	    exit 0
	;;
	[rR] | [rR][eE][mM][oO][vV][eE])
	    runCustomRemove
	    return $?
	;;
	[aA][lL][lL] | [aA])
	    selectedCustom="$list"
	;;
	[nN][oO][nN][eE] | [nN])
	    selectedCustom=""
	;;
	*)
	    checkNum "$usersel"
	    if [ $? -ne 2 ] ; then
		doselectCustom $usersel
	    fi
	;;
    esac
done
}

checkRoot
SOFTWAREDIR="@EPM_SOFTWARE@"
if [ -d "$SOFTWAREDIR" ] ; then
    cd "$SOFTWAREDIR"
else
    printf "`eval_gettext \"Software dir -- '%s' not found.\"`\n" "$SOFTWAREDIR"
    exit 1
fi
envInit
initCustom
mainCustom

exit 0
